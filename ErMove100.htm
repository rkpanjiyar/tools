<!DOCTYPE html>
<html lang="en">

<head>
  <title>ER moves < 100%</title>
      <meta charset="UTF-8">
      <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate">
      <meta http-equiv="Pragma" content="no-cache">
      <meta http-equiv="Expires" content="0">
      <meta charset="UTF-8">
      <div style="display: flex; justify-content: space-between; align-items: center;">
        <h2>&nbspLT_100 &nbsp<span style="color: #DE3163;">BD</span>, <span style="color: #FFAC1C;">BU</span>,
          <span style="color: #6495ED;">TU</span>, <span style="color: #2AAA8A;">TD</span>
        </h2>
        <div style="display: flex; gap: 20px; margin-right: 60px;">
          <a href="Straddle.htm" target="_blank" style="text-decoration: none; color: #DE3163;">ErRunUp</a>
          <a href="ErMove.htm" target="_blank" style="text-decoration: none; color: #FFAC1C;">GT_150</a>
        </div>
      </div>
      <style>
        .page-title {
          color: #DE3163;
        }

        body {
          font-family: Arial, sans-serif;
          margin: 0;
          padding: 0;
          background-color: #ffffff;
          color: #000000;
        }

        .light-theme {
          background-color: #ffffff;
          color: #000000;
        }


        th,
        td {
          padding: 8px;
          text-align: left;
          border-bottom: 1px solid #ddd;
        }

        th {
          background-color: #333;
          color: white;
        }

        .light-theme th {
          background-color: #eee;
          color: black;
        }

        .toggle-btn {
          padding: 10px;
          margin: 10px;
          cursor: pointer;
          border: none;
          background-color: #444;
          color: white;
        }

        .light-theme .toggle-btn {
          background-color: #ccc;
          color: black;
        }

        /* Use GPU acceleration for animations */
        .animated {
          transform: translateZ(0);
          will-change: transform;
        }

        /* Optimize table rendering */
        #table-wrapper {
          contain: content;
          height: 90vh;
          overflow-y: auto;
        }

        /* Prevent layout shifts */
        table {
          table-layout: fixed;
          width: 100%;
        }

        #earningsTable {
          max-height: 80vh;
          overflow-y: auto;
          width: 100%;
        }

        thead th {
          position: sticky;
          top: 0;
          z-index: 2;
          background-color: #333;
          color: white;
        }

        .light-theme thead th {
          background-color: #eee;
          color: black;
        }

        .highlight-green {
          background-color: #d6fbb1 !important;
        }

        .highlight-orange {
          background-color: #FFECB3 !important;
        }

        .highlight-red {
          background-color: #FFEBEE !important;
        }

        .highlight-blue {
          background-color: #cefcfd !important
        }

        a,
        a label,
        a:link,
        a:visited,
        a:hover,
        a:active {
          cursor: pointer !important;
          text-decoration: none;
          color: inherit;
        }

        a:hover {
          text-decoration: underline !important;
        }

        td a,
        td a:link,
        td a:visited,
        td a:hover,
        td a:active {
          cursor: pointer !important;
        }

        .spinner-wrapper {
          position: fixed;
          top: 20px;
          right: 20px;
          z-index: 1000;
          display: none;
        }

        .spinner {
          width: 30px;
          height: 30px;
          border: 3px solid #f3f3f3;
          border-top: 3px solid #3498db;
          border-radius: 50%;
          animation: spin 1s linear infinite;
        }

        .spinnerDone {
          width: 30px;
          height: 30px;
          border: 3px solid #f3f3f3;
          border-top: 3px solid #2AAA8A;
          border-radius: 50%;
          animation: spin 1s linear infinite;
        }

        @keyframes spin {
          0% {
            transform: rotate(0deg);
          }

          100% {
            transform: rotate(360deg);
          }
        }
      </style>
</head>

<body>
  <div class="spinner-wrapper" id="loadingSpinner">
    <div class="spinner"></div>
  </div>
  <div class="spinner-wrapper" id="doneSpinner" style="display: none;">
    <div class="spinnerDone"></div>
  </div>
  <div id="table-wrapper">
    <table id="earningsTable">
      <thead>
        <tr>
          <th onclick="sortTable(0)">Ticker</th>
          <th onclick="sortTable(1)">Rsi</th>
          <th onclick="sortTable(2)">ErDate(Nxt)</th>
          <th onclick="sortTable(3)">ErDate(Pre)</th>
          <th onclick="sortTable(4)">Straddle%</th>
          <th onclick="sortTable(5)">ExpMove%</th>
          <th onclick="sortTable(6)">ErMove%</th>
          <th onclick="sortTable(7)">Change%</th>
          <th onclick="sortTable(8)">Price</th>
          <th onclick="sortTable(9)">MA5</th>
          <th onclick="sortTable(10)">MA13</th>
          <th onclick="sortTable(11)">MA200</th>
        </tr>
      </thead>
      <tbody>
        <!-- Data will be injected here -->
      </tbody>
    </table>
  </div>
  <script>
    const tickers = ['A', 'AA', 'AAON', 'AAP', 'AAPL', 'ABBV', 'ABNB', 'ABT', 'ACHC', 'ACI',
      'ACGL', 'ACM', 'ACN', 'ADBE', 'ADC', 'ADDYY', 'ADI', 'ADM', 'ADMA', 'ADP',
      'ADSK', 'ADT', 'AEE', 'AES', 'AFG', 'AFL', 'AFRM', 'AGCO', 'AGNC', 'AIG',
      'AIZ', 'AJG', 'AKAM', 'AL', 'ALAB', 'ALB', 'ALE', 'ALG', 'ALGN', 'ALGM',
      'ALK', 'ALL', 'ALLE', 'ALLY', 'ALNY', 'ALSN', 'ALTR', 'ALX', 'AM', 'AMAT',
      'AMBA', 'AME', 'AMED', 'AMG', 'AMGN', 'AMH', 'AMKR', 'AMP', 'AMTM', 'AMZN',
      'AN', 'ANGI', 'ANET', 'ANSS', 'AON', 'AOS', 'APA', 'APD', 'APH', 'APG',
      'APLD', 'APLS', 'APO', 'APP', 'APPF', 'APTV', 'ARE', 'ARES', 'ARGX', 'ARM',
      'ARMK', 'ARW', 'ARWR', 'AS', 'ASAN', 'ASH', 'ASML', 'ASPN', 'ASTS', 'ATLC',
      'ATI', 'ATO', 'ATR', 'AVAV', 'AVB', 'AVDL', 'AVGO', 'AVPT', 'AVT', 'AVTR',
      'AVY', 'AWK', 'AXON', 'AXP', 'AXS', 'AXSM', 'AXTA', 'AYI', 'AZN', 'AZO',
      'AZTA', 'BA', 'BAC', 'BAH', 'BALL', 'BATS', 'BAX', 'BBWI', 'BBY', 'BC',
      'BCPC', 'BDX', 'BE', 'BEN', 'BG', 'BGNE', 'BHF', 'BIIB',
      'BILL', 'BIO', 'BIRK', 'BJ', 'BK', 'BKR', 'BKNG', 'BL', 'BLK', 'BLD',
      'BLDR', 'BMI', 'BMRN', 'BMY', 'BOKF', 'BPMC', 'BPOP', 'BR', 'BRBR', 'BROS',
      'BRO', 'BRKR', 'BRZE', 'BSX', 'BSY', 'BURL', 'BWA', 'BWXT', 'BX', 'BYD',
      'C', 'CACC', 'CACI', 'CAG', 'CALT', 'CAMT', 'CAR', 'CARR', 'CART', 'CASY',
      'CAT', 'CAVA', 'CB', 'CBOE', 'CBRE', 'CBSH', 'CC', 'CCCS', 'CCJ', 'CCK',
      'CCL', 'CDNS', 'CDW', 'CE', 'CEG', 'CELH', 'CERT', 'CF', 'CFG', 'CFLT',
      'CG', 'CGNX', 'CGON', 'CHD', 'CHDN', 'CHE', 'CHH', 'CHKP', 'CHRD', 'CHRW',
      'CHTR', 'CHWY', 'CI', 'CIEN', 'CIM', 'CINF', 'CIVI', 'CL', 'CLF', 'CLH',
      'CLSK', 'CLVT', 'CLX', 'CMA', 'CMCSA', 'CME', 'CMI', 'CMG', 'CMS', 'CNA',
      'CNH', 'CNM', 'CNP', 'CNS', 'CNTA', 'CNXC', 'COF', 'COHR', 'COIN', 'COLB',
      'COLD', 'COLM', 'COP', 'COR', 'CORT', 'COST', 'COTY', 'CPB', 'CPAY',
      'CPNG', 'CPRI', 'CPRT', 'CPT', 'CR', 'CRDO', 'CRL', 'CRNX', 'CROX', 'CRSP',
      'CRUS', 'CRVL', 'CRWD', 'CSCO', 'CSGP', 'CSL', 'CSWI', 'CSX', 'CTAS',
      'CTSH', 'CTVA', 'CUBE', 'CUZ', 'CVNA', 'CVLT', 'CVS', 'CW', 'CWAN', 'CWEN',
      'CWST', 'CXT', 'CYBR', 'CZR', 'D', 'DAL', 'DAR', 'DASH', 'DAY', 'DBRG',
      'DBX', 'DCBO', 'DD', 'DDOG', 'DE', 'DECK', 'DELL', 'DG', 'DGX', 'DHI',
      'DHR', 'DINO', 'DIS', 'DJT', 'DKNG', 'DLR', 'DLB', 'DMLP', 'DLTR', 'DOC',
      'DOCS', 'DOCU', 'DOV', 'DOW', 'DOX', 'DPZ', 'DRI', 'DSGX', 'DT', 'DTE',
      'DTM', 'DUK', 'DUOL', 'DV', 'DVA', 'DVN', 'DX', 'DXC', 'DXCM', 'EA', 'EBAY',
      'ECL', 'ED', 'EEFT', 'EFX', 'EG', 'EHC', 'EIX', 'EL', 'ELAN', 'ELF', 'ELS',
      'ELV', 'EME', 'EMN', 'EMR', 'ENFN', 'ENPH', 'ENTG', 'ENOV', 'ENVX', 'EOG',
      'EOSE', 'EPAM', 'EPR', 'EQH', 'EQIX', 'EQR', 'EQT', 'ES', 'ESAB', 'ESI',
      'ESS', 'ESTA', 'ESTC', 'ETN', 'ETR', 'ETSY', 'EVR', 'EVRG', 'EW', 'EWBC',
      'EXAS', 'EXC', 'EXE', 'EXEL', 'EXPE', 'EXPD', 'EXPO', 'EXR', 'F', 'FAF',
      'FANG', 'FAST', 'FBIN', 'FCN', 'FCNCA', 'FDX', 'FE', 'FERG', 'FFIV', 'FHI',
      'FHB', 'FI', 'FICO', 'FINV', 'FIS', 'FITB', 'FIVE', 'FIVN', 'FIX', 'FLO',
      'FLS', 'FMC', 'FND', 'FNF', 'FNB', 'FOLD', 'FORM', 'FOUR', 'FOX', 'FOXA',
      'FR', 'FRPT', 'FROG', 'FRT', 'FSLR', 'FTAI', 'FTI', 'FTNT', 'FTRE', 'FTV',
      'FUTU', 'FWONA', 'FWONK', 'FYBR', 'G', 'GAP', 'GD', 'GDDY', 'GDRX', 'GE',
      'GEHC', 'GEN', 'GERN', 'GEV', 'GGAL', 'GGG', 'GH', 'GILD', 'GIS', 'GKOS',
      'GL', 'GLBE', 'GLOB', 'GLPI', 'GLW', 'GM', 'GMED', 'GNRC', 'GNTX', 'GO',
      'GOOG', 'GOOGL', 'GPC', 'GPK', 'GRAB', 'GRMN', 'GRAL', 'GS', 'GSHD',
      'GTES', 'GTLB', 'GWW', 'GWRE', 'GXO', 'H', 'HAL', 'HALO', 'HAS', 'HAYW',
      'HBAN', 'HCA', 'HCP', 'HD', 'HEI', 'HES', 'HESM', 'HHH', 'HIG',
      'HII', 'HIMS', 'HIW', 'HLI', 'HLNE', 'HLT', 'HNGE', 'HOG', 'HOLX', 'HON',
      'HOOD', 'HPQ', 'HR', 'HRB', 'HRL', 'HST', 'HUBS', 'HUM', 'HUN', 'HUT',
      'HWM', 'HXL', 'IAC', 'IBM', 'IBKR', 'ICE', 'IDA', 'IDCC', 'IDXX', 'IEX',
      'IFF', 'IILG', 'ILMN', 'IMCR', 'INCY', 'INFA', 'INGM', 'INGR', 'INOD',
      'INSP', 'INTA', 'INTC', 'INTU', 'INVH', 'IONQ', 'IONS', 'IOT', 'IP', 'IPG',
      'IPGP', 'IQV', 'IR', 'IRDM', 'IREN', 'IRM', 'ISRG', 'IT', 'ITCI', 'ITT',
      'ITW', 'IVZ', 'J', 'JAZZ', 'JBL', 'JBHT', 'JCI', 'JEF', 'JHG', 'JKHY',
      'JLL', 'JNJ', 'JNPR', 'JOE', 'JPM', 'K', 'KBR', 'KC', 'KD', 'KDP', 'KEX',
      'KEY', 'KEYS', 'KHC', 'KIM', 'KKR', 'KLAC', 'KMB', 'KMI', 'KMPR', 'KNX',
      'KNSL', 'KO', 'KR', 'KRYS', 'KSPI', 'KVUE', 'L', 'LAD', 'LAMR', 'LAZ',
      'LBRDA', 'LBRDK', 'LCID', 'LDOS', 'LEA', 'LEG', 'LEGN', 'LEN', 'LH', 'LHX',
      'LII', 'LIN', 'LINE', 'LITE', 'LKQ', 'LLY', 'LLYVA', 'LLYVK', 'LMND', 'LMT',
      'LNC', 'LNG', 'LNW', 'LOAR', 'LOPE', 'LOW', 'LPX', 'LPLA', 'LRCX', 'LSCC',
      'LSTR', 'LULU', 'LUV', 'LVWR', 'LW', 'LX', 'LYB', 'LYFT', 'LYV', 'M', 'MA',
      'MAA', 'MAN', 'MANH', 'MAR', 'MAS', 'MASI', 'MAT', 'MC', 'MCD', 'MCK',
      'MCO', 'MDB', 'MDLZ', 'MDT', 'MDU', 'MEDP', 'MELI', 'META', 'MET', 'MGM',
      'MGNI', 'MHK', 'MCHP', 'MIDD', 'MIRM', 'MKC', 'MKL', 'MKTX', 'MKSI', 'MLM',
      'MMM', 'MMC', 'MMYT', 'MNDY', 'MNST', 'MO', 'MOH', 'MORN', 'MOS', 'MP',
      'MPC', 'MPW', 'MPWR', 'MRP', 'MRNA', 'MRUS', 'MRVL', 'MSA', 'MSCI', 'MSFT',
      'MSGS', 'MSI', 'MSTR', 'MTB', 'MTCH', 'MTD', 'MTDR', 'MTG', 'MTN', 'MTSI',
      'MTZ', 'MU', 'MUSA', 'NAMS', 'NARI', 'NBIX', 'NCNO', 'NDAQ', 'NDSN', 'NEE',
      'NEM', 'NET', 'NEU', 'NFLX', 'NFG', 'NFE', 'NI', 'NKE', 'NNN', 'NOC',
      'NOV', 'NOVT', 'NOW', 'NRG', 'NSA', 'NSC', 'NSSC', 'NTAP', 'NTNX', 'NTRA',
      'NTRS', 'NU', 'NUE', 'NVCR', 'NVDA', 'NVMI', 'NVO', 'NVS', 'NVST', 'NVT',
      'NWL', 'NWS', 'NWSA', 'NXPI', 'NXST', 'NYT', 'O', 'OC', 'ODD', 'ODFL',
      'OGE', 'OGN', 'OHI', 'OKLO', 'OKTA', 'OKE', 'OLN', 'OLLI', 'OMC', 'OMF',
      'ON', 'ONON', 'ONTO', 'ORC', 'ORCL', 'ORI', 'ORLY', 'OSK', 'OTIS', 'OVV',
      'OWL', 'OXY', 'OZK', 'PAC', 'PAG', 'PANW', 'PARA', 'PARAA', 'PATH', 'PAYC',
      'PAYX', 'PB', 'PCAR', 'PCG', 'PCOR', 'PCTY', 'PD', 'PDD', 'PDFS', 'PEG',
      'PEN', 'PENN', 'PEP', 'PFG', 'PFGC', 'PFSI', 'PFE', 'PH', 'PHM', 'PI',
      'PII', 'PINC', 'PINS', 'PKG', 'PK', 'PL', 'PLD', 'PLNT', 'PLTK', 'PLTR',
      'PM', 'PNC', 'PNFP', 'PNR', 'PNW', 'PODD', 'POOL', 'POST', 'POWI', 'PPC',
      'PPG', 'PPL', 'PR', 'PRCT', 'PRGO', 'PRI', 'PRU', 'PSA', 'PSN', 'PSTG',
      'PTC', 'PTCT', 'PVH', 'PWR', 'PYPL', 'QBTS', 'QCOM', 'QDEL', 'QFIN', 'QGEN',
      'QRVO', 'QS', 'QTWO', 'R', 'RACE', 'RARE', 'RBA', 'RBC', 'RBLX', 'RCAT',
      'RCL', 'RDDT', 'REG', 'REGN', 'RELX', 'REYN', 'REXR', 'RF', 'RGA', 'RGTI',
      'RH', 'RHI', 'RIOT', 'RITM', 'RIVN', 'RJF', 'RKLB', 'RKT', 'RL', 'RLI',
      'RMD', 'RMBS', 'RNA', 'RNG', 'RNR', 'ROIV', 'ROK', 'ROL', 'ROP', 'ROST',
      'ROKU', 'RPM', 'RPRX', 'RRX', 'RS', 'RSG', 'RTX', 'RUM', 'RVTY', 'RWX',
      'RYAN', 'RYN', 'RYTM', 'S', 'SAIA', 'SAIC', 'SAM', 'SAP', 'SARO', 'SBAC',
      'SBUX', 'SCCO', 'SCI', 'SEIC', 'SEMR', 'SERV', 'SF', 'SFM', 'SG', 'SGML',
      'SHAK', 'SHC', 'SHOP', 'SHW', 'SGI', 'SIRI', 'SITE', 'SITM', 'SKT', 'SLB',
      'SLGN', 'SLM', 'SMCI', 'SMG', 'SMR', 'SNAP', 'SNA', 'SNDK', 'SNDR', 'SNOW',
      'SNPS', 'SNV', 'SNX', 'SO', 'SOFI', 'SOLV', 'SON', 'SOUN', 'SPB', 'SPG',
      'SPGI', 'SPHR', 'SPOT', 'SPR', 'SPSC', 'SPT', 'SRAD', 'SRPT', 'SSNC',
      'SSD', 'ST', 'STAA', 'STAG', 'STE', 'STLD', 'STOK', 'STT', 'STWD', 'STZ',
      'SUI', 'SW', 'SWK', 'SWKS', 'SWTX', 'SYM', 'SYK', 'SYY', 'T', 'TAP',
      'TARS', 'TBA', 'TDG', 'TDY', 'TEAM', 'TECH', 'TER', 'TFC', 'TFX', 'TGT',
      'TGTX', 'THC', 'THO', 'TJX', 'TKR', 'TLN', 'TMO', 'TNL', 'TOST', 'TPL',
      'TPR', 'TRGP', 'TRI', 'TRMB', 'TRNS', 'TROW', 'TRU', 'TREX', 'TRIP', 'TSCO',
      'TSLA', 'TSM', 'TT', 'TTC', 'TTD', 'TTEK', 'TTWO', 'TW', 'TWLO', 'TWST',
      'TXG', 'TXN', 'TXRH', 'TXT', 'TYL', 'U', 'UA', 'UAA', 'UBER', 'UDR', 'UFPT',
      'UGI', 'UHAL', 'UHS', 'UI', 'ULTA', 'UNH', 'UNM', 'UNP', 'UPST', 'UPS',
      'URI', 'USFD', 'USB', 'USLM', 'UTHR', 'UWMC', 'V', 'VAC', 'VCEL', 'VEEV',
      'VERX', 'VFC', 'VIRT', 'VICI', 'VKTX', 'VLTO', 'VLO', 'VMC', 'VNOM', 'VNO',
      'VOYA', 'VRSK', 'VRSN', 'VRT', 'VRTX', 'VST', 'VSTS', 'VTR', 'VTRS', 'VTEX',
      'VTMX', 'VVV', 'W', 'WAB', 'WAL', 'WAT', 'WBA', 'WBD', 'WBS', 'WCC',
      'WCN', 'WDC', 'WDAY', 'WDFC', 'WEC', 'WFC', 'WELL', 'WEN', 'WES', 'WEX',
      'WH', 'WHR', 'WLS', 'WLK', 'WM', 'WMB', 'WMT', 'WOLF', 'WPC', 'WRB', 'WSC',
      'WST', 'WSM', 'WTF', 'WTFC', 'WTW', 'WU', 'WULF', 'WWD', 'WY', 'WYNN', 'X',
      'XEL', 'XOM', 'XP', 'XPO', 'XRAY', 'XYL', 'YETI', 'YOU', 'YUM', 'Z', 'ZBH',
      'ZBRA', 'ZG', 'ZI', 'ZION', 'ZM', 'ZS', 'ZTS'
    ];
    function toPercent(value) {
      const num = parseFloat(value);
      return isNaN(num) ? 'N/A' : (num * 100).toFixed(2);
    }
    function toDecimal(value) {
      const num = parseFloat(value);
      return isNaN(num) ? 'N/A' : num.toFixed(2);
    }
    function calculateRSI(closes, period = 14) {
      if (closes.length <= period) return null;

      let gains = 0;
      let losses = 0;

      // Initial average gain/loss
      for (let i = 1; i <= period; i++) {
        const delta = closes[i] - closes[i - 1];
        if (delta > 0) gains += delta;
        else losses -= delta;
      }

      let avgGain = gains / period;
      let avgLoss = losses / period;

      // Apply smoothing for the rest
      for (let i = period + 1; i < closes.length; i++) {
        const delta = closes[i] - closes[i - 1];
        const gain = delta > 0 ? delta : 0;
        const loss = delta < 0 ? -delta : 0;

        avgGain = (avgGain * (period - 1) + gain) / period;
        avgLoss = (avgLoss * (period - 1) + loss) / period;
      }

      const rs = avgLoss === 0 ? 100 : avgGain / avgLoss;
      const rsi = 100 - 100 / (1 + rs);
      return rsi;
    }
    async function fetchWithRetry(url, retries = 3, delay = 10000) {
      for (let i = 0; i < retries; i++) {
        try {
          const res = await fetch(url);
          if (!res.ok) throw new Error('Fetch failed');
          return await res.json();
        } catch (err) {
          if (i === retries - 1) throw err;
          await new Promise(res => setTimeout(res, delay));
        }
      }
    }
    async function getPrices3(ticker) {
      try {
        const proxy = 'https://corsproxy.io/?';
        //const proxy = 'https://thingproxy.freeboard.io/fetch/';
        //const proxy = 'https://api.allorigins.win/raw?url=';
        const url = `https://query1.finance.yahoo.com/v8/finance/chart/${ticker}?interval=1d&range=1y`;
        const data = await fetchWithRetry(proxy + encodeURIComponent(url));

        const result = data.chart.result[0];
        const timestamps = result.timestamp || [];
        const closes = result.indicators.quote[0].close || [];

        const paired = timestamps.map((ts, i) => ({ date: new Date(ts * 1000), close: closes[i] }))
          .filter(item => item.close != null)
          .sort((a, b) => a.date - b.date);

        const recent = paired.slice(-13);
        const price = recent[recent.length - 1].close;
        const ma5 = recent.slice(-5).reduce((sum, p) => sum + p.close, 0) / 5;
        const ma13 = recent.reduce((sum, p) => sum + p.close, 0) / 13;
        const rsi = calculateRSI(paired.map(p => p.close));
        const ma200 = paired.length < 200 ? 0 : paired.slice(-200).reduce((sum, p) => sum + p.close, 0) / 200;

        return { price, ma5, ma13, ma200, rsi };
      } catch (err) {
        console.error(`Error fetching ${ticker}:`, err);
        return {};
      }
    }

    async function getPrices2(ticker) {
      try {
        //const proxy = 'https://corsproxy.io/?';
        const proxy = 'https://thingproxy.freeboard.io/fetch/';
        //const proxy = 'https://api.allorigins.win/raw?url=';
        const url = `https://query1.finance.yahoo.com/v8/finance/chart/${ticker}?interval=1d&range=1y`;
        const data = await fetchWithRetry(proxy + encodeURIComponent(url));

        const result = data.chart.result[0];
        const timestamps = result.timestamp || [];
        const closes = result.indicators.quote[0].close || [];

        const paired = timestamps.map((ts, i) => ({ date: new Date(ts * 1000), close: closes[i] }))
          .filter(item => item.close != null)
          .sort((a, b) => a.date - b.date);

        const recent = paired.slice(-13);
        const price = recent[recent.length - 1].close;
        const ma5 = recent.slice(-5).reduce((sum, p) => sum + p.close, 0) / 5;
        const ma13 = recent.reduce((sum, p) => sum + p.close, 0) / 13;
        const rsi = calculateRSI(paired.map(p => p.close));
        const ma200 = paired.length < 200 ? 0 : paired.slice(-200).reduce((sum, p) => sum + p.close, 0) / 200;

        return { price, ma5, ma13, ma200, rsi };
      } catch (err) {
        return await getPrices3(ticker);
      }
    }

    async function getPrices(ticker) {
      try {
        //const proxy = 'https://corsproxy.io/?';
        //const proxy = 'https://thingproxy.freeboard.io/fetch/';
        const proxy = 'https://api.allorigins.win/raw?url=';
        const url = `https://query1.finance.yahoo.com/v8/finance/chart/${ticker}?interval=1d&range=1y`;
        const data = await fetchWithRetry(proxy + encodeURIComponent(url));

        const result = data.chart.result[0];
        const timestamps = result.timestamp || [];
        const closes = result.indicators.quote[0].close || [];

        const paired = timestamps.map((ts, i) => ({ date: new Date(ts * 1000), close: closes[i] }))
          .filter(item => item.close != null)
          .sort((a, b) => a.date - b.date);

        const recent = paired.slice(-13);
        const price = recent[recent.length - 1].close;
        const ma5 = recent.slice(-5).reduce((sum, p) => sum + p.close, 0) / 5;
        const ma13 = recent.reduce((sum, p) => sum + p.close, 0) / 13;
        const rsi = calculateRSI(paired.map(p => p.close));
        const ma200 = paired.length < 200 ? 0 : paired.slice(-200).reduce((sum, p) => sum + p.close, 0) / 200;

        return { price, ma5, ma13, ma200, rsi };
      } catch (err) {
        return await getPrices2(ticker);
      }
    }
    async function fetchEarnings(ticker) {
      try {
        const res = await fetch(`https://phx.unusualwhales.com/api/companies_earnings/historic/${ticker}`);
        const resPrice = await fetch(`https://phx.unusualwhales.com/api/ticker/${ticker}/price/`);
        const resPrice2 = await fetch(`https://phx.unusualwhales.com/api/companies/${ticker}/get_historical_prices?limit=1`);
        const json = await res.json();
        const jsonPrice = await resPrice.json();
        const jsonPrice2 = await resPrice2.json();
        if (!json.data || json.data.length === 0) return null;

        var latest = json.data[json.data.length - 1];
        var next = latest;
        if (!latest.post_earnings_move_3d && json.data.length > 1)
          latest = json.data[json.data.length - 2];

        const preErPrice = parseFloat(latest.price) || 0;
        const latestPrice = parseFloat(jsonPrice.curr) || parseFloat(jsonPrice2.history[0].price) || parseFloat(jsonPrice2.history[0].close_price) || 0;
        const priceChange = ((latestPrice - preErPrice) / preErPrice * 100).toFixed(2);

        return {
          ticker: ticker,
          preErPrice: preErPrice || 0,
          price: latestPrice || 0,
          priceChange: priceChange || 0,
          er_date: next.report_date || 'N/A',
          report_date: latest.report_date || 'N/A',
          straddle: toPercent(next.expected_move_perc) || 0,
          expected_move_perc: toPercent(latest.expected_move_perc) || 0,
          post_earnings_move_1d: toPercent(latest.post_earnings_move_1d) || 0
        };
      } catch (err) {
        console.error(`Error fetching ${ticker}:`, err);
        return null;
      }
    }

    function updatePriceCells(ticker, priceData, postErMove1d) {
      const row = document.getElementById(`row-${ticker}`);
      if (!row || !priceData || !priceData.price) return;

      row.querySelector('.ma5').innerHTML = `<a href="https://marketchameleon.com/Overview/${ticker}" target="_blank" style="color:inherit;">${priceData.ma5.toFixed(2)}</a>`;
      row.querySelector('.ma13').innerHTML = `<a href="https://www.tipranks.com/stocks/${ticker}/forecast" target="_blank" style="color:inherit;">${priceData.ma13.toFixed(2)}</a>`;
      row.querySelector('.ma200').innerHTML = `<a href="https://www.barchart.com/stocks/quotes/${ticker}/overview" target="_blank" style="color:inherit;${priceData.price < priceData.ma200 ? 'color:red;' : 'color:green'}">${priceData.ma200 !== null ? priceData.ma200.toFixed(2) : '-'}</a>`;

      row.querySelector('.rsi').textContent = priceData.rsi.toFixed(2);
      // Add highlights
      if (postErMove1d < 0 && priceData.ma5 >= priceData.ma13)
        row.classList.add('highlight-orange'); //BU = true;
      if (postErMove1d > 0 && priceData.ma5 <= priceData.ma13)
        row.classList.add('highlight-green'); //TD = true;
      if (postErMove1d < 0 && priceData.ma5 <= priceData.ma13)
        row.classList.add('highlight-red'); //BD = true;
      if (postErMove1d > 0 && priceData.ma5 >= priceData.ma13)
        row.classList.add('highlight-blue'); //TU = true;
    }

    // Utility to check if today is a new business day compared to cached date
    function isNewBusinessDay(lastDateStr) {
      if (!lastDateStr) return true;
      const lastDate = new Date(lastDateStr);
      const now = new Date();

      // Check if today is weekend
      if (now.getDay() === 0 || now.getDay() === 6) return false;

      // Check if last fetch was on a different business day
      let prevBusinessDay = new Date(now);
      if (now.getDay() === 1) { // Monday
        prevBusinessDay.setDate(now.getDate() - 3);
      } else if (now.getDay() > 1) {
        prevBusinessDay.setDate(now.getDate() - 1);
      }

      // If last fetch was not today, it's a new business day
      return (
        lastDate.getFullYear() !== now.getFullYear() ||
        lastDate.getMonth() !== now.getMonth() ||
        lastDate.getDate() !== now.getDate()
      );
    }

    // Utility to check if over an hour has passed since last fetch
    function isOverAnHour(lastDateStr) {
      if (!lastDateStr) return true;
      const lastDate = new Date(lastDateStr);
      const now = new Date();
      return (now - lastDate) > 60 * 60 * 1000;
    }

    // Cache helpers
    function getCache(key) {
      try {
        return JSON.parse(localStorage.getItem(key));
      } catch {
        return null;
      }
    }
    function setCache(key, value) {
      localStorage.setItem(key, JSON.stringify(value));
    }

    // Wrap fetchEarnings with caching
    async function fetchEarningsCached(ticker) {
      const spinner = document.getElementById('loadingSpinner');
      const cacheKey = `ErMove100_er_${ticker}`;
      const cached = getCache(cacheKey);
      if (
        cached &&
        cached.data &&
        cached.fetchedAt &&
        !isNewBusinessDay(cached.fetchedAt)) {
        return cached.data;
      }
      spinner.style.display = 'block';
      try {
        const data = await fetchEarnings(ticker);
        if (data) {
          setCache(cacheKey, { data, fetchedAt: new Date().toISOString() });
        }
        return data;
      } finally {
        spinner.style.display = 'none';
        const spinnerDone = document.getElementById('doneSpinner');
        spinner.style.display = 'block';
      }
    }

    // Wrap getPrices with caching
    async function getPricesCached(ticker) {
      const spinner = document.getElementById('loadingSpinner');
      const cacheKey = `ErMove100_$_${ticker}`;
      const cached = getCache(cacheKey);
      if (
        cached &&
        cached.data &&
        cached.data.price &&
        cached.fetchedAt &&
        !isNewBusinessDay(cached.fetchedAt)) {
        return cached.data;
      }
      spinner.style.display = 'block';
      try {
        const data = await getPrices(ticker);
        if (data && data.price) {
          setCache(cacheKey, { data, fetchedAt: new Date().toISOString() });
        }
        return data;
      } finally {
        spinner.style.display = 'none';
      }
    }

    // Update renderTable to use cached fetchers in parallel with concurrency control
    async function renderTable() {
      const spinner = document.getElementById('loadingSpinner');
      spinner.style.display = 'block'; // Show spinner
      const tableBody = document.querySelector('#earningsTable tbody');
      tableBody.innerHTML = '';

      // Concurrency limit for network requests
      const CONCURRENCY_LIMIT = 20;
      let index = 0;

      // Helper to render a row immediately from cached data
      function renderRowFromCache(ticker, data) {
        if (!data || !data.expected_move_perc || data.expected_move_perc == null) return;

        var calcPostErMove1d = Math.abs(data.post_earnings_move_1d);
        var straddleCalulated = data.straddle && data.straddle != "N/A" ? toDecimal(parseFloat(data.straddle) + parseFloat(data.straddle) * 0.15) : '-';
        var expMoveCalulated = toDecimal(parseFloat(data.expected_move_perc) + calcPostErMove1d * 0.15);
        var straddleMoveRatioPerc = toDecimal(calcPostErMove1d / expMoveCalulated * 100);
        if (!data || straddleMoveRatioPerc > 100)
          return;

        const row = `<tr id="row-${ticker}">
                    <td>${ticker}</td>
                    <td class="rsi">-</td>
                    <td>${data.er_date}</td>
                    <td>${data.report_date}</td>
                    <td>${straddleCalulated}</td>
                    <td>${expMoveCalulated}</td>
                    <td>${data.post_earnings_move_1d}</td>
                    <td class="priceChange"><a href="https://robinhood.com/stocks/${ticker}" target="_blank" style="color:inherit;">${data.priceChange}</a></td>
                    <td class="price"><a href="https://finviz.com/quote.ashx?t=${ticker}" target="_blank" style="color:inherit;}">${data.price}</a></td>
                    <td class="ma5">-</td>
                    <td class="ma13">-</td>
                    <td class="ma200">-</td>
                  </tr>`;
        tableBody.innerHTML += row;

        // Try to get price data from cache and update cells immediately if available
        const priceCache = getCache(`ErMove100_$_${ticker}`);
        if (
          priceCache &&
          priceCache.data &&
          priceCache.price &&
          priceCache.fetchedAt &&
          !isNewBusinessDay(priceCache.fetchedAt) &&
          !isOverAnHour(priceCache.fetchedAt)
        ) {
          updatePriceCells(ticker, priceCache.data, data.post_earnings_move_1d);
        } else {
          // Otherwise, fetch price data in background
          getPricesCached(ticker)
            .then(priceData => updatePriceCells(ticker, priceData, data.post_earnings_move_1d))
            .catch(err => console.error(`Price error for ${ticker}:`, err));
        }
      }

      // Helper to process a batch of tickers (fetching only those not cached/expired)
      async function processBatch(batch) {
        // For each ticker, check if earnings cache is valid
        const uncachedTickers = [];
        const cachedData = [];

        for (const ticker of batch) {
          const cacheKey = `ErMove100_er_${ticker}`;
          const cached = getCache(cacheKey);
          if (
            cached &&
            cached.data &&
            cached.fetchedAt &&
            !isNewBusinessDay(cached.fetchedAt) &&
            !isOverAnHour(cached.fetchedAt)
          ) {
            cachedData.push({ ticker, data: cached.data });
          } else {
            uncachedTickers.push(ticker);
          }
        }

        // Render cached rows immediately
        for (const { ticker, data } of cachedData) {
          renderRowFromCache(ticker, data);
        }

        // Fetch uncached earnings in parallel (with concurrency limit)
        for (let i = 0; i < uncachedTickers.length; i += CONCURRENCY_LIMIT) {
          const subBatch = uncachedTickers.slice(i, i + CONCURRENCY_LIMIT);
          const earningsResults = await Promise.all(
            subBatch.map(ticker => fetchEarningsCached(ticker).catch(() => null))
          );

          for (let j = 0; j < subBatch.length; j++) {
            const ticker = subBatch[j];
            const data = earningsResults[j];
            renderRowFromCache(ticker, data);
          }
        }
      }

      // Process all tickers in batches
      try {
        while (index < tickers.length) {
          const batch = tickers.slice(index, index + CONCURRENCY_LIMIT);
          await processBatch(batch);
          index += CONCURRENCY_LIMIT;
          await new Promise(res => setTimeout(res, 200));
        }

        // Automatically sort by report date (column index 5)
        sortTable(5, true);
      } finally {
        spinner.style.display = 'none'; // Hide spinner when done or on error
      }
    }

    function sortTable(columnIndex, descending = false) {
      const table = document.getElementById("earningsTable");
      const tbody = table.tBodies[0];
      const rows = Array.from(tbody.rows);
      const isNumeric = columnIndex !== 0 && columnIndex !== 2 && columnIndex !== 3;

      const sortedRows = rows.sort((a, b) => {
        const valA = a.cells[columnIndex].textContent.replace('%', '');
        const valB = b.cells[columnIndex].textContent.replace('%', '');

        if (isNumeric) {
          return parseFloat(valA) - parseFloat(valB);
        } else {
          return valA.localeCompare(valB);
        }
      });

      if (descending || tbody.getAttribute('data-sorted') === `${columnIndex}-asc`) {
        sortedRows.reverse();
        tbody.setAttribute('data-sorted', `${columnIndex}-desc`);
      } else {
        tbody.setAttribute('data-sorted', `${columnIndex}-asc`);
      }

      tbody.innerHTML = '';
      sortedRows.forEach(row => tbody.appendChild(row));
    }

    renderTable();

  </script>
</body>

</html>