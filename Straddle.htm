<!DOCTYPE html>
<html lang="en">

<head>
  <title>Straddle: ER Run Up</title>
  <meta charset="UTF-8">
  <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate">
  <meta http-equiv="Pragma" content="no-cache">
  <meta http-equiv="Expires" content="0">
  <div style="display: flex; justify-content: space-between; align-items: center;">
    <h2>&nbspStraddle Pricing &nbsp<span style="color: #DE3163;">BD</span>, <span style="color: #FFAC1C;">BU</span>,
      <span style="color: #6495ED;">TU</span>, <span style="color: #2AAA8A;">TD</span>
    </h2>
    <div style="display: flex; gap: 20px; margin-right: 60px;">
      <a href="ErMove.htm" target="_blank" style="text-decoration: none; color: #FFAC1C;">GT_100</a>
      <a href="ErMove100.htm" target="_blank" style="text-decoration: none; color: #6495ED;">LT_100</a>
    </div>
  </div>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 0;
      background-color: #ffffff;
      color: #000000;
    }

    .light-theme {
      background-color: #ffffff;
      color: #000000;
    }

    th,
    td {
      padding: 8px;
      text-align: left;
      border-bottom: 1px solid #ddd;
    }

    th {
      background-color: #333;
      color: white;
    }

    .light-theme th {
      background-color: #eee;
      color: black;
    }

    .toggle-btn {
      padding: 10px;
      margin: 10px;
      cursor: pointer;
      border: none;
      background-color: #444;
      color: white;
    }

    .light-theme .toggle-btn {
      background-color: #ccc;
      color: black;
    }

    /* Use GPU acceleration for animations */
    .animated {
      transform: translateZ(0);
      will-change: transform;
    }

    /* Optimize table rendering */
    #table-wrapper {
      contain: content;
      height: 90vh;
      overflow-y: auto;
    }

    /* Prevent layout shifts */
    table {
      table-layout: fixed;
      width: 100%;
    }

    thead th {
      position: sticky;
      top: 0;
      z-index: 2;
      background-color: #333;
      color: white;
    }

    .light-theme thead th {
      background-color: #eee;
      color: black;
    }

    #earningsTable {
      max-height: 80vh;
      overflow-y: auto;
      width: 100%;
    }

    .highlight-green {
      background-color: #d6fbb1 !important;
    }

    .highlight-orange {
      background-color: #FFECB3 !important;
    }

    .highlight-red {
      background-color: #FFEBEE !important;
    }

    .highlight-blue {
      background-color: #cefcfd !important;
    }

    a,
    a label,
    a:link,
    a:visited,
    a:hover,
    a:active {
      cursor: pointer !important;
      text-decoration: none;
      color: inherit;
    }

    a:hover {
      text-decoration: underline !important;
    }

    td a,
    td a:link,
    td a:visited,
    td a:hover,
    td a:active {
      cursor: pointer !important;
    }

    .spinner-wrapper {
      position: fixed;
      top: 20px;
      right: 20px;
      z-index: 1000;
      display: none;
    }

    .spinner {
      width: 30px;
      height: 30px;
      border: 3px solid #f3f3f3;
      border-top: 3px solid #3498db;
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }

    .spinnerDone {
      width: 30px;
      height: 30px;
      border: 3px solid #f3f3f3;
      border-top: 3px solid #2AAA8A;
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }

    @keyframes spin {
      0% {
        transform: rotate(0deg);
      }

      100% {
        transform: rotate(360deg);
      }
    }
  </style>
</head>

<body>
  <div class="spinner-wrapper" id="loadingSpinner">
    <div class="spinner"></div>
  </div>
  <div class="spinner-wrapper" id="doneSpinner" style="display: none;">
    <div class="spinnerDone"></div>
  </div>
  <div id="table-wrapper">
    <table id="earningsTable">
      <thead>
        <tr>
          <th onclick="sortTable(0)">Ticker</th>
          <th onclick="sortTable(1)">Rsi</th>
          <th onclick="sortTable(2)">ErDate(Nxt)</th>
          <th onclick="sortTable(3)">ErDate(Pre)</th>
          <th onclick="sortTable(4)">Straddle%</th>
          <th onclick="sortTable(5)">HistMove%</th>
          <th onclick="sortTable(6)">ExpMove%</th>
          <th onclick="sortTable(7)">ErMove%</th>
          <th onclick="sortTable(8)">Change%</th>
          <th onclick="sortTable(9)">Price</th>
          <th onclick="sortTable(10)">MA5</th>
          <th onclick="sortTable(11)">MA13</th>
          <th onclick="sortTable(12)">MA200</th>
          <th onclick="sortTable(13)">P</th>
        </tr>
      </thead>
      <tbody>
        <!-- Data will be injected here -->
      </tbody>
    </table>
  </div>
  <script>
    const tickers = ['A',
      'AA',
      'AAL',
      'AAON',
      'AAP',
      'AAPL',
      'ABBV',
      'ABNB',
      'ABR',
      'ABT',
      'ACHC',
      'ACHR',
      'ACI',
      'ACGL',
      'ACM',
      'ACMR',
      'ACN',
      'ACVA',
      'ACWI',
      'ADBE',
      'ADC',
      'ADI',
      'ADM',
      'ADMA',
      'ADP',
      'ADSK',
      'ADUS',
      'AEE',
      'AEM',
      'AEO',
      'AEP',
      'AES',
      'AESI',
      'AEVA',
      'AFG',
      'AFL',
      'AFRM',
      'AG',
      'AGCO',
      'AGI',
      'AGNC',
      'AIG',
      'AI',
      'AIG',
      'AIZ',
      'AJG',
      'AKAM',
      'AKRO',
      'ALAB',
      'ALB',
      'ALC',
      'ALE',
      'ALGN',
      'ALGM',
      'ALIT',
      'ALK',
      'ALL',
      'ALLE',
      'ALLY',
      'ALNY',
      'ALSN',
      'ALTR',
      'ALX',
      'AM',
      'AMAT',
      'AMBA',
      'AMC',
      'AMCR',
      'AMD',
      'AME',
      'AMED',
      'AMGN',
      'AMKR',
      'AMLP',
      'AMPL',
      'AMSC',
      'AMT',
      'AMTM',
      'AMX',
      'AMZN',
      'AN',
      'ANET',
      'ANF',
      'ANGI',
      'ANSS',
      'AON',
      'APA',
      'APD',
      'APH',
      'APLD',
      'APO',
      'APP',
      'APPF',
      'APTV',
      'AR',
      'ARCC',
      'ARCO',
      'ARDT',
      'ARE',
      'ARES',
      'ARGX',
      'ARI',
      'ARLP',
      'ARM',
      'ARMK',
      'ARQT',
      'ARR',
      'ARRY',
      'ARW',
      'ARWR',
      'AS',
      'ASAN',
      'ASML',
      'ASO',
      'ASPN',
      'ASTS',
      'ATAT',
      'ATEC',
      'ATI',
      'ATO',
      'ATR',
      'AU',
      'AUPH',
      'AUR',
      'AVAV',
      'AVGO',
      'AVPT',
      'AVT',
      'AVTR',
      'AVY',
      'AWK',
      'AXON',
      'AXP',
      'AXS',
      'AXSM',
      'AXTA',
      'AYI',
      'AZN',
      'AZO',
      'AZTA',
      'B',
      'BA',
      'BABA',
      'BAC',
      'BAH',
      'BALL',
      'BAM',
      'BANC',
      'BAX',
      'BB',
      'BBAI',
      'BBD',
      'BBIO',
      'BBWI',
      'BBY',
      'BCE',
      'BCPC',
      'BCS',
      'BDX',
      'BE',
      'BEAM',
      'BEKE',
      'BEN',
      'BEP',
      'BF.B',
      'BF/B',
      'BG',
      'BGNE',
      'BHC',
      'BHF',
      'BHP',
      'BHVN',
      'BIDU',
      'BIIB',
      'BILI',
      'BILL',
      'BIRK',
      'BITB',
      'BITO',
      'BJ',
      'BK',
      'BKE',
      'BKNG',
      'BKR',
      'BL',
      'BLBD',
      'BLDR',
      'BLK',
      'BMRN',
      'BMI',
      'BMY',
      'BNS',
      'BOKF',
      'BOX',
      'BP',
      'BPMC',
      'BPOP',
      'BR',
      'BRBR',
      'BRK/B',
      'BRO',
      'BROS',
      'BRX',
      'BRZE',
      'BSX',
      'BSY',
      'BTC',
      'BTDR',
      'BTE',
      'BTG',
      'BTI',
      'BTU',
      'BUD',
      'BULL',
      'BURL',
      'BVN',
      'BWA',
      'BWXT',
      'BX',
      'BXP',
      'BYD',
      'C',
      'CAAP',
      'CACC',
      'CAG',
      'CAH',
      'CAKE',
      'CALM',
      'CALT',
      'CAMT',
      'CAR',
      'CARR',
      'CART',
      'CASY',
      'CAT',
      'CAVA',
      'CB',
      'CBOE',
      'CBRE',
      'CBSH',
      'CC',
      'CCCS',
      'CCI',
      'CCJ',
      'CCK',
      'CCL',
      'CDNA',
      'CDNS',
      'CDW',
      'CE',
      'CEG',
      'CELH',
      'CERT',
      'CF',
      'CFG',
      'CFLT',
      'CG',
      'CGNX',
      'CGON',
      'CHD',
      'CHDN',
      'CHE',
      'CHH',
      'CHKP',
      'CHRD',
      'CHRW',
      'CHTR',
      'CHWY',
      'CI',
      'CIEN',
      'CIFR',
      'CIM',
      'CINF',
      'CIVI',
      'CL',
      'CLBT',
      'CLDX',
      'CLF',
      'CLH',
      'CLMT',
      'CLOV',
      'CLS',
      'CLSK',
      'CLVT',
      'CLX',
      'CM',
      'CMA',
      'CMCSA',
      'CME',
      'CMI',
      'CMG',
      'CMPO',
      'CNC',
      'CNH',
      'CNK',
      'CNM',
      'CNP',
      'CNQ',
      'CNR',
      'CNS',
      'CNTA',
      'CNXC',
      'COF',
      'COHR',
      'COIN',
      'COLB',
      'COLD',
      'COLM',
      'COMM',
      'COMP',
      'COO',
      'COP',
      'COR',
      'CORT',
      'CORZ',
      'COST',
      'COTY',
      'COUR',
      'CPAY',
      'CPB',
      'CPNG',
      'CPRI',
      'CPRT',
      'CPT',
      'CR',
      'CRCL',
      'CRDO',
      'CRGY',
      'CRH',
      'CRI',
      'CRK',
      'CRM',
      'CROX',
      'CRSP',
      'CRUS',
      'CRVL',
      'CRWD',
      'CRWV',
      'CSCO',
      'CSGP',
      'CSL',
      'CSWI',
      'CSX',
      'CTAS',
      'CTRA',
      'CTSH',
      'CTVA',
      'CUZ',
      'CVAC',
      'CVE',
      'CVI',
      'CVNA',
      'CVS',
      'CVX',
      'CW',
      'CWAN',
      'CWEN',
      'CWST',
      'CXW',
      'CYBR',
      'CYTK',
      'CXT',
      'CZR',
      'D',
      'DAL',
      'DAN',
      'DAR',
      'DASH',
      'DAVE',
      'DB',
      'DBRG',
      'DBX',
      'DCI',
      'DD',
      'DDOG',
      'DE',
      'DECK',
      'DELL',
      'DEO',
      'DG',
      'DGX',
      'DHI',
      'DHR',
      'DHT',
      'DIA',
      'DINO',
      'DIS',
      'DJT',
      'DK',
      'DKL',
      'DKNG',
      'DKS',
      'DLR',
      'DLB',
      'DMLP',
      'DLTR',
      'DNB',
      'DNN',
      'DOC',
      'DOCN',
      'DOCS',
      'DOCU',
      'DOV',
      'DOW',
      'DOX',
      'DPZ',
      'DRD',
      'DRI',
      'DRS',
      'DSGX',
      'DT',
      'DTE',
      'DTM',
      'DUK',
      'DUOL',
      'DVA',
      'DVN',
      'DX',
      'DXC',
      'DXCM',
      'DYN',
      'EA',
      'EAT',
      'EBAY',
      'EC',
      'ECL',
      'ED',
      'EDU',
      'EEM',
      'EEFT',
      'EFA',
      'EH',
      'EHC',
      'EIX',
      'EL',
      'ELAN',
      'ELF',
      'ELME',
      'ELS',
      'ELV',
      'EME',
      'EMN',
      'EMR',
      'ENB',
      'ENFN',
      'ENPH',
      'ENR',
      'ENTG',
      'ENOV',
      'ENVX',
      'EOG',
      'EOSE',
      'EPAM',
      'EPD',
      'EPR',
      'EQH',
      'EQIX',
      'EQNR',
      'EQR',
      'EQT',
      'EQX',
      'ERIC',
      'ERIE',
      'ERJ',
      'ES',
      'ESAB',
      'ESI',
      'ESS',
      'ESTA',
      'ESTC',
      'ET',
      'ETH',
      'ETHA',
      'ETHE',
      'ETN',
      'ETNB',
      'ETOR',
      'ETR',
      'ETSY',
      'EUFN',
      'EVR',
      'EVRG',
      'EW',
      'EWBC',
      'EWC',
      'EWG',
      'EWJ',
      'EWU',
      'EWW',
      'EWY',
      'EWZ',
      'EXAS',
      'EXC',
      'EXE',
      'EXEL',
      'EXK',
      'EXPE',
      'EXPD',
      'EXPO',
      'EXR',
      'EXTR',
      'EZU',
      'F',
      'FAF',
      'FANG',
      'FAST',
      'FBIN',
      'FCX',
      'FCN',
      'FCNCA',
      'FDS',
      'FDX',
      'FE',
      'FERG',
      'FEZ',
      'FFIV',
      'FG',
      'FHI',
      'FHN',
      'FI',
      'FICO',
      'FINV',
      'FIS',
      'FITB',
      'FIVE',
      'FIVN',
      'FIX',
      'FL',
      'FLEX',
      'FLG',
      'FLO',
      'FLR',
      'FLYW',
      'FMC',
      'FND',
      'FOLD',
      'FORM',
      'FOUR',
      'FOX',
      'FOXA',
      'FR',
      'FRPT',
      'FRO',
      'FROG',
      'FRSH',
      'FSK',
      'FSLR',
      'FSLY',
      'FSM',
      'FTAI',
      'FTI',
      'FTNT',
      'FTRE',
      'FTV',
      'FUBO',
      'FUTU',
      'FVRR',
      'FWONA',
      'FWONK',
      'FXI',
      'FYBR',
      'G',
      'GAP',
      'GBTC',
      'GD',
      'GDDY',
      'GDRX',
      'GDS',
      'GDX',
      'GE',
      'GEF',
      'GEHC',
      'GEL',
      'GEN',
      'GENI',
      'GEO',
      'GERN',
      'GEV',
      'GGAL',
      'GH',
      'GILD',
      'GIS',
      'GLBE',
      'GLD',
      'GLNG',
      'GLOB',
      'GLW',
      'GLXY',
      'GM',
      'GMAB',
      'GME',
      'GNRC',
      'GOGL',
      'GOGO',
      'GOLF',
      'GOOG',
      'GOOGL',
      'GOOS',
      'GPK',
      'GPN',
      'GRAB',
      'GRAL',
      'GRFS',
      'GRMN',
      'GRND',
      'GRPN',
      'GS',
      'GSK',
      'GSHD',
      'GT',
      'GTES',
      'GTLB',
      'GTX',
      'GWW',
      'GWRE',
      'GXO',
      'H',
      'HAE',
      'HAL',
      'HALO',
      'HAS',
      'HAYW',
      'HBAN',
      'HBI',
      'HCA',
      'HCSG',
      'HD',
      'HE',
      'HEI',
      'HEI.A',
      'HES',
      'HESM',
      'HHH',
      'HIG',
      'HII',
      'HIMS',
      'HIMX',
      'HIW',
      'HL',
      'HLI',
      'HLNE',
      'HLT',
      'HMY',
      'HNGE',
      'HOG',
      'HOLX',
      'HON',
      'HOOD',
      'HP',
      'HPE',
      'HPQ',
      'HQY',
      'HR',
      'HRB',
      'HRL',
      'HRMY',
      'HSAI',
      'HSBC',
      'HST',
      'HSY',
      'HTHT',
      'HTZ',
      'HUBS',
      'HUM',
      'HUN',
      'HUT',
      'HWM',
      'HXL',
      'HYG',
      'IAG',
      'IAU',
      'IBB',
      'IBIT',
      'IBKR',
      'IBM',
      'IBN',
      'IBRX',
      'ICE',
      'ICLN',
      'IDCC',
      'IDV',
      'IDXX',
      'IEF',
      'IEX',
      'IFF',
      'IGT',
      'IGV',
      'IHI',
      'IHS',
      'IJR',
      'ILMN',
      'IMAX',
      'IMCR',
      'IMO',
      'INDA',
      'INCY',
      'INFA',
      'INGM',
      'INGR',
      'INOD',
      'INSM',
      'INSP',
      'INSW',
      'INTA',
      'INTC',
      'INTU',
      'INVH',
      'IONQ',
      'IOT',
      'IP',
      'IPG',
      'IPGP',
      'IQ',
      'IQV',
      'IR',
      'IRDM',
      'IREN',
      'IRM',
      'IRT',
      'IRTC',
      'ISRG',
      'IT',
      'ITA',
      'ITB',
      'ITCI',
      'ITT',
      'ITW',
      'IVV',
      'IVZ',
      'IWM',
      'IYR',
      'IYT',
      'IYW',
      'J',
      'JAZZ',
      'JBL',
      'JBLU',
      'JBHT',
      'JCI',
      'JD',
      'JEF',
      'JHG',
      'JHX',
      'JKHY',
      'JKS',
      'JLL',
      'JNJ',
      'JNK',
      'JNPR',
      'JOBY',
      'JOE',
      'JPM',
      'K',
      'KBE',
      'KBR',
      'KC',
      'KD',
      'KDP',
      'KEX',
      'KEY',
      'KEYS',
      'KGC',
      'KHC',
      'KIM',
      'KKR',
      'KLAC',
      'KMB',
      'KMI',
      'KMPR',
      'KNX',
      'KNSL',
      'KO',
      'KOS',
      'KR',
      'KRE',
      'KRP',
      'KRYS',
      'KSPI',
      'KTOS',
      'KVUE',
      'KVYO',
      'L',
      'LAD',
      'LAMR',
      'LAZ',
      'LB',
      'LBRDA',
      'LBRDK',
      'LBRT',
      'LC',
      'LCID',
      'LDOS',
      'LEA',
      'LEG',
      'LEGN',
      'LEN',
      'LEU',
      'LH',
      'LHX',
      'LI',
      'LII',
      'LIN',
      'LINE',
      'LION',
      'LITE',
      'LKQ',
      'LLY',
      'LLYVA',
      'LLYVK',
      'LMND',
      'LMT',
      'LNC',
      'LNG',
      'LNT',
      'LNW',
      'LOGI',
      'LOAR',
      'LOPE',
      'LOW',
      'LPL',
      'LPLA',
      'LPG',
      'LQD',
      'LQDA',
      'LRCX',
      'LSPD',
      'LSTR',
      'LTH',
      'LU',
      'LULU',
      'LUMN',
      'LUNR',
      'LUV',
      'LVS',
      'LVWR',
      'LX',
      'LYB',
      'LYFT',
      'LYG',
      'LYV',
      'LZ',
      'LZB',
      'M',
      'MA',
      'MAC',
      'MAG',
      'MAN',
      'MANH',
      'MANU',
      'MAR',
      'MARA',
      'MAS',
      'MASI',
      'MAT',
      'MBB',
      'MBLY',
      'MC',
      'MCD',
      'MCK',
      'MCO',
      'MCY',
      'MDB',
      'MDLZ',
      'MDT',
      'MDU',
      'MDY',
      'MEDP',
      'MELI',
      'MEOH',
      'MESO',
      'META',
      'MET',
      'MFG',
      'MGA',
      'MGM',
      'MGNI',
      'MHK',
      'MCHP',
      'MIDD',
      'MIRM',
      'MKC',
      'MKL',
      'MKTX',
      'MKSI',
      'MLI',
      'MLKN',
      'MMC',
      'MMM',
      'MNDY',
      'MNKD',
      'MNST',
      'MO',
      'MODG',
      'MOMO',
      'MORN',
      'MOS',
      'MP',
      'MPC',
      'MPLX',
      'MPW',
      'MPWR',
      'MQ',
      'MRK',
      'MRNA',
      'MRUS',
      'MRVL',
      'MSA',
      'MSCI',
      'MSFT',
      'MSGS',
      'MSI',
      'MSTR',
      'MT',
      'MTB',
      'MTCH',
      'MTDR',
      'MTN',
      'MTRX',
      'MTSR',
      'MTUM',
      'MU',
      'MUB',
      'MUR',
      'MUSA',
      'MVST',
      'MWA',
      'NAMS',
      'NBIS',
      'NCLH',
      'NDAQ',
      'NE',
      'NEE',
      'NEM',
      'NET',
      'NEXT',
      'NFLX',
      'NFG',
      'NG',
      'NIO',
      'NKE',
      'NLY',
      'NMAX',
      'NMFC',
      'NMM',
      'NN',
      'NNE',
      'NOC',
      'NOG',
      'NOK',
      'NOV',
      'NOVT',
      'NOW',
      'NRG',
      'NSC',
      'NSA',
      'NSSC',
      'NTAP',
      'NTNX',
      'NTRA',
      'NTRS',
      'NU',
      'NUE',
      'NVAX',
      'NVDA',
      'NVGS',
      'NVMI',
      'NVO',
      'NVS',
      'NVST',
      'NVT',
      'NVTS',
      'NWL',
      'NWS',
      'NWSA',
      'NXE',
      'NXPI',
      'NXST',
      'NXT',
      'NYT',
      'O',
      'OBDC',
      'OC',
      'ODD',
      'ODFL',
      'OGE',
      'OGN',
      'OHI',
      'OIH',
      'OKLO',
      'OKTA',
      'OKE',
      'OLED',
      'OLN',
      'OLLI',
      'OMC',
      'OMF',
      'ON',
      'ONON',
      'ONTO',
      'OPK',
      'OPRA',
      'ORC',
      'ORCL',
      'ORI',
      'ORLY',
      'OSCR',
      'OSK',
      'OVV',
      'OWL',
      'OXY',
      'OZK',
      'PAA',
      'PAAS',
      'PAC',
      'PAGP',
      'PAGS',
      'PANW',
      'PARA',
      'PARAA',
      'PARR',
      'PATH',
      'PAY',
      'PAYC',
      'PAYX',
      'PB',
      'PBA',
      'PBF',
      'PBI',
      'PBR',
      'PCAR',
      'PCG',
      'PCOR',
      'PCRX',
      'PCT',
      'PCTY',
      'PD',
      'PDD',
      'PDFS',
      'PEG',
      'PEN',
      'PENN',
      'PEP',
      'PFG',
      'PFGC',
      'PFSI',
      'PFE',
      'PG',
      'PGNY',
      'PGR',
      'PGY',
      'PH',
      'PHM',
      'PI',
      'PII',
      'PINC',
      'PINS',
      'PL',
      'PLAB',
      'PLD',
      'PLMR',
      'PLNT',
      'PLTK',
      'PLTR',
      'PLUG',
      'PLAY',
      'PLYA',
      'PM',
      'PNC',
      'PNFP',
      'PNR',
      'PNW',
      'PODD',
      'POOL',
      'PONY',
      'POST',
      'POWI',
      'PPC',
      'PPG',
      'PPL',
      'PR',
      'PRCH',
      'PRCT',
      'PRGO',
      'PRI',
      'PRMB',
      'PRU',
      'PSA',
      'PSEC',
      'PSN',
      'PSNY',
      'PSTG',
      'PSX',
      'PTC',
      'PTCT',
      'PTON',
      'PVH',
      'PWR',
      'PYPL',
      'PZZA',
      'QBTS',
      'QCOM',
      'QDEL',
      'QFIN',
      'QGEN',
      'QLYS',
      'QQQ',
      'QRVO',
      'QS',
      'QSR',
      'QTWO',
      'QUBT',
      'QXO',
      'QYLD',
      'R',
      'RACE',
      'RAMP',
      'RARE',
      'RBLX',
      'RBRK',
      'RBC',
      'RCL',
      'RCAT',
      'RDDT',
      'RDFN',
      'RDNT',
      'RDW',
      'RDWR',
      'REG',
      'REGN',
      'RELX',
      'RELY',
      'REYN',
      'REXR',
      'RF',
      'RGA',
      'RGTI',
      'RH',
      'RHI',
      'RIG',
      'RIO',
      'RIOT',
      'RITM',
      'RIVN',
      'RJF',
      'RKLB',
      'RKT',
      'RL',
      'RLI',
      'RLX',
      'RMD',
      'RMBS',
      'RNA',
      'RNG',
      'RNR',
      'RNW',
      'ROIV',
      'ROK',
      'ROL',
      'ROP',
      'ROST',
      'ROKU',
      'RPM',
      'RPRX',
      'RRR',
      'RRX',
      'RS',
      'RSG',
      'RSI',
      'RSP',
      'RTX',
      'RUM',
      'RUN',
      'RVLV',
      'RVMD',
      'RXRX',
      'RY',
      'RYAN',
      'RYN',
      'RYTM',
      'S',
      'SA',
      'SAIA',
      'SAIL',
      'SAN',
      'SAND',
      'SAP',
      'SARO',
      'SATS',
      'SBAC',
      'SBLK',
      'SBS',
      'SBSW',
      'SBUX',
      'SCCO',
      'SCHD',
      'SCHG',
      'SCHK',
      'SCHW',
      'SCI',
      'SCS',
      'SDGR',
      'SE',
      'SEDG',
      'SEIC',
      'SEMR',
      'SERV',
      'SEZL',
      'SF',
      'SFM',
      'SG',
      'SGML',
      'SH',
      'SHAK',
      'SHC',
      'SHCO',
      'SHEL',
      'SHOP',
      'SHW',
      'SGI',
      'SIL',
      'SIRI',
      'SITE',
      'SITM',
      'SJM',
      'SKT',
      'SKX',
      'SKY',
      'SLAB',
      'SLB',
      'SLGN',
      'SLM',
      'SLV',
      'SM',
      'SMCI',
      'SMG',
      'SMH',
      'SMMT',
      'SMR',
      'SMTC',
      'SN',
      'SNA',
      'SNAP',
      'SNDK',
      'SNDR',
      'SNOW',
      'SNPS',
      'SNV',
      'SNX',
      'SO',
      'SOC',
      'SOFI',
      'SON',
      'SONY',
      'SOUN',
      'SOXL',
      'SOXX',
      'SPB',
      'SPG',
      'SPGI',
      'SPHR',
      'SPOT',
      'SPR',
      'SPRY',
      'SPXL',
      'SPY',
      'SPT',
      'SRAD',
      'SRCE',
      'SRE',
      'SRPT',
      'SRRK',
      'SSL',
      'SSO',
      'SSRM',
      'STAA',
      'STAG',
      'STLA',
      'STM',
      'STNE',
      'STNG',
      'STWD',
      'STX',
      'STZ',
      'SU',
      'SUI',
      'SUN',
      'SUZ',
      'SW',
      'SWK',
      'SWKS',
      'SWTX',
      'SYF',
      'SYK',
      'SYM',
      'SYY',
      'T',
      'TAC',
      'TAL',
      'TALO',
      'TAP',
      'TARS',
      'TBA',
      'TCOM',
      'TD',
      'TDOC',
      'TDW',
      'TEAM',
      'TECK',
      'TEL',
      'TEM',
      'TENB',
      'TER',
      'TEVA',
      'TEX',
      'TFC',
      'TGT',
      'TGTX',
      'THC',
      'THO',
      'TIGO',
      'TIGR',
      'TJX',
      'TKR',
      'TLN',
      'TLT',
      'TM',
      'TMC',
      'TMDX',
      'TME',
      'TMHC',
      'TMO',
      'TMUS',
      'TNK',
      'TOL',
      'TOST',
      'TPB',
      'TPC',
      'TPG',
      'TPR',
      'TQQQ',
      'TRGP',
      'TRI',
      'TRMB',
      'TRNS',
      'TROW',
      'TRU',
      'TREX',
      'TRIP',
      'TS',
      'TSCO',
      'TSEM',
      'TSLA',
      'TSM',
      'TSN',
      'TT',
      'TTAN',
      'TTC',
      'TTD',
      'TTE',
      'TTEK',
      'TTWO',
      'TW',
      'TWLO',
      'TWST',
      'TXG',
      'TXN',
      'TXNM',
      'TXRH',
      'TXT',
      'TYL',
      'U',
      'UAA',
      'UAL',
      'UBER',
      'UBS',
      'UDR',
      'UEC',
      'UFPT',
      'UGI',
      'UHAL',
      'UHS',
      'UI',
      'ULS',
      'ULTA',
      'UMC',
      'UNFI',
      'UNH',
      'UNIT',
      'UNP',
      'UPRO',
      'UPS',
      'UPST',
      'URBN',
      'URI',
      'USAR',
      'USB',
      'USFD',
      'USO',
      'UUUU',
      'V',
      'VAC',
      'VAL',
      'VALE',
      'VCEL',
      'VEEV',
      'VET',
      'VFC',
      'VFS',
      'VG',
      'VGK',
      'VICI',
      'VIK',
      'VIPS',
      'VIST',
      'VITL',
      'VKTX',
      'VLTO',
      'VLO',
      'VLY',
      'VMC',
      'VNET',
      'VNOM',
      'VNQ',
      'VNO',
      'VOYA',
      'VRNA',
      'VRNS',
      'VRNT',
      'VRSK',
      'VRSN',
      'VRT',
      'VRTX',
      'VSAT',
      'VSCO',
      'VST',
      'VSTS',
      'VTI',
      'VTR',
      'VTRS',
      'VTEX',
      'VTMX',
      'VVV',
      'VWO',
      'VZ',
      'W',
      'WAB',
      'WAL',
      'WAT',
      'WAY',
      'WB',
      'WBA',
      'WBD',
      'WBS',
      'WCC',
      'WCN',
      'WDC',
      'WDAY',
      'WDFC',
      'WDS',
      'WEC',
      'WEN',
      'WES',
      'WEX',
      'WFC',
      'WFRD',
      'WGS',
      'WH',
      'WHR',
      'WING',
      'WIX',
      'WLY',
      'WM',
      'WMB',
      'WMT',
      'WOLF',
      'WPM',
      'WPC',
      'WRB',
      'WRD',
      'WSC',
      'WST',
      'WSM',
      'WTFC',
      'WTRG',
      'WTW',
      'WU',
      'WULF',
      'WVE',
      'WWW',
      'WY',
      'WYNN',
      'X',
      'XENE',
      'XHB',
      'XLB',
      'XLC',
      'XLE',
      'XLF',
      'XLI',
      'XLK',
      'XLP',
      'XLU',
      'XLV',
      'XLY',
      'XOM',
      'XP',
      'XPEV',
      'XPO',
      'XRAY',
      'XYZ',
      'YETI',
      'YOU',
      'YPF',
      'YUM',
      'Z',
      'ZBH',
      'ZBRA',
      'ZETA',
      'ZG',
      'ZI',
      'ZIM',
      'ZION',
      'ZM',
      'ZS',
      'ZTO',
      'ZTS'
    ];

    function toPercent(value) {
      const num = parseFloat(value);
      return isNaN(num) ? 'N/A' : (num * 100).toFixed(2);
    }
    function toDecimal(value) {
      const num = parseFloat(value);
      return isNaN(num) ? 'N/A' : num.toFixed(2);
    }
    function calculateRSI(closes, period = 14) {
      if (closes.length <= period) return null;

      let gains = 0;
      let losses = 0;

      // Initial average gain/loss
      for (let i = 1; i <= period; i++) {
        const delta = closes[i] - closes[i - 1];
        if (delta > 0) gains += delta;
        else losses -= delta;
      }

      let avgGain = gains / period;
      let avgLoss = losses / period;

      // Apply smoothing for the rest
      for (let i = period + 1; i < closes.length; i++) {
        const delta = closes[i] - closes[i - 1];
        const gain = delta > 0 ? delta : 0;
        const loss = delta < 0 ? -delta : 0;

        avgGain = (avgGain * (period - 1) + gain) / period;
        avgLoss = (avgLoss * (period - 1) + loss) / period;
      }

      const rs = avgLoss === 0 ? 100 : avgGain / avgLoss;
      const rsi = 100 - 100 / (1 + rs);
      return rsi;
    }
    async function fetchWithRetry(url, retries = 3, delay = 1000) {
      for (let i = 0; i < retries; i++) {
        try {
          const res = await fetch(url);
          if (!res.ok) throw new Error('Fetch failed');
          return await res.json();
        } catch (err) {
          if (i === retries - 1) throw err;
          await new Promise(res => setTimeout(res, delay));
        }
      }
    }
    async function getPrices3(ticker) {
      try {
        const proxy = 'https://corsproxy.io/?';
        //const proxy = 'https://thingproxy.freeboard.io/fetch/';
        //const proxy = 'https://api.allorigins.win/raw?url=';
        const url = `https://query1.finance.yahoo.com/v8/finance/chart/${ticker}?interval=1d&range=1y`;
        const data = await fetchWithRetry(proxy + encodeURIComponent(url));

        const result = data.chart.result[0];
        const timestamps = result.timestamp || [];
        const closes = result.indicators.quote[0].close || [];

        const paired = timestamps.map((ts, i) => ({ date: new Date(ts * 1000), close: closes[i] }))
          .filter(item => item.close != null)
          .sort((a, b) => a.date - b.date);

        const recent = paired.slice(-13);
        const price = recent[recent.length - 1].close;
        const ma5 = recent.slice(-5).reduce((sum, p) => sum + p.close, 0) / 5;
        const ma13 = recent.reduce((sum, p) => sum + p.close, 0) / 13;
        const rsi = calculateRSI(paired.map(p => p.close));
        const ma200 = paired.length < 200 ? 0 : paired.slice(-200).reduce((sum, p) => sum + p.close, 0) / 200;

        return { price, ma5, ma13, ma200, rsi };
      } catch (err) {
        console.error(`Error fetching ${ticker}:`, err);
        return {};
      }
    }

    async function getPrices2(ticker) {
      try {
        //const proxy = 'https://corsproxy.io/?';
        const proxy = 'https://thingproxy.freeboard.io/fetch/';
        //const proxy = 'https://api.allorigins.win/raw?url=';
        const url = `https://query1.finance.yahoo.com/v8/finance/chart/${ticker}?interval=1d&range=1y`;
        const data = await fetchWithRetry(proxy + encodeURIComponent(url));

        const result = data.chart.result[0];
        const timestamps = result.timestamp || [];
        const closes = result.indicators.quote[0].close || [];

        const paired = timestamps.map((ts, i) => ({ date: new Date(ts * 1000), close: closes[i] }))
          .filter(item => item.close != null)
          .sort((a, b) => a.date - b.date);

        const recent = paired.slice(-13);
        const price = recent[recent.length - 1].close;
        const ma5 = recent.slice(-5).reduce((sum, p) => sum + p.close, 0) / 5;
        const ma13 = recent.reduce((sum, p) => sum + p.close, 0) / 13;
        const rsi = calculateRSI(paired.map(p => p.close));
        const ma200 = paired.length < 200 ? 0 : paired.slice(-200).reduce((sum, p) => sum + p.close, 0) / 200;

        return { price, ma5, ma13, ma200, rsi };
      } catch (err) {
        return await getPrices3(ticker);
      }
    }

    async function getPrices(ticker) {
      try {
        //const proxy = 'https://corsproxy.io/?';
        //const proxy = 'https://thingproxy.freeboard.io/fetch/';
        const proxy = 'https://api.allorigins.win/raw?url=';
        const url = `https://query1.finance.yahoo.com/v8/finance/chart/${ticker}?interval=1d&range=1y`;
        const data = await fetchWithRetry(proxy + encodeURIComponent(url));

        const result = data.chart.result[0];
        const timestamps = result.timestamp || [];
        const closes = result.indicators.quote[0].close || [];

        const paired = timestamps.map((ts, i) => ({ date: new Date(ts * 1000), close: closes[i] }))
          .filter(item => item.close != null)
          .sort((a, b) => a.date - b.date);

        const recent = paired.slice(-13);
        const price = recent[recent.length - 1].close;
        const ma5 = recent.slice(-5).reduce((sum, p) => sum + p.close, 0) / 5;
        const ma13 = recent.reduce((sum, p) => sum + p.close, 0) / 13;
        const rsi = calculateRSI(paired.map(p => p.close));
        const ma200 = paired.length < 200 ? 0 : paired.slice(-200).reduce((sum, p) => sum + p.close, 0) / 200;

        return { price, ma5, ma13, ma200, rsi };
      } catch (err) {
        return await getPrices2(ticker);
      }
    }
    async function fetchEarnings(ticker) {
      try {
        const res = await fetch(`https://phx.unusualwhales.com/api/companies_earnings/historic/${ticker}`);
        const resPrice = await fetch(`https://phx.unusualwhales.com/api/ticker/${ticker}/price/`);
        const resPrice2 = await fetch(`https://phx.unusualwhales.com/api/companies/${ticker}/get_historical_prices?limit=1`);
        const json = await res.json();
        const jsonPrice = await resPrice.json();
        const jsonPrice2 = await resPrice2.json();
        if (!json.data || json.data.length === 0) return null;

        var latest = json.data[json.data.length - 1];
        var next = latest;
        // Check if next earnings date is within 1 month
        const nextDate = new Date(next.report_date);
        nextDate.setHours(0, 0, 0, 0); // Set to start of day
        const today = new Date();
        today.setHours(0, 0, 0, 0); // Set to start of day
        const oneMonthFromNow = new Date();
        oneMonthFromNow.setHours(0, 0, 0, 0)
        oneMonthFromNow.setMonth(today.getMonth() + 1);

        // Skip if earnings date is not within next month
        if (nextDate > oneMonthFromNow || nextDate < today) return null;

        // Get last 4 quarters average implied move with 15% addition
        const last4Quarters = json.data.slice(-5, -1); // Exclude the next earnings date
        const avgHistoricMove = last4Quarters
          .map(q => {
            const baseMove = parseFloat(q.expected_move_perc) || 0;
            // Add 15% to each quarter's expected move
            return baseMove + (baseMove * 0.15);
          })
          .filter(move => move > 0)
          .reduce((sum, move, i, arr) => sum + move / arr.length, 0);

        if (!latest.post_earnings_move_3d && json.data.length > 1)
          latest = json.data[json.data.length - 2];

        const preErPrice = parseFloat(latest.price) || 0;
        const latestPrice = parseFloat(jsonPrice.curr) || parseFloat(jsonPrice2.history[0].price) || parseFloat(jsonPrice2.history[0].close_price) || 0;
        const priceChange = ((latestPrice - preErPrice) / preErPrice * 100).toFixed(2);

        return {
          ticker: ticker,
          preErPrice: preErPrice || 0,
          price: latestPrice || 0,
          priceChange: priceChange || 0,
          er_date: next.report_date || 'N/A',
          report_date: latest.report_date || 'N/A',
          avgHistoricMove: avgHistoricMove * 100 || 0,
          straddle: toPercent(next.expected_move_perc) || 0,
          expected_move_perc: toPercent(latest.expected_move_perc) || 0,
          post_earnings_move_1d: toPercent(latest.post_earnings_move_1d) || 0
        };
      } catch (err) {
        console.error(`Error fetching ${ticker}:`, err);
        return null;
      }
    }

    function updatePriceCells(ticker, priceData, postErMove1d) {
      const row = document.getElementById(`row-${ticker}`);

      // Calculate ratio between MA5 and MA13
      const ratioMa5Ma13 = priceData.ma5 / priceData.ma13;
      const percentDiffMa5Ma13 = Math.abs((ratioMa5Ma13 - 1) * 100);
      // Determine text color based on conditions
      let textColor = 'inherit';
      if (priceData.ma5 >= priceData.ma13) {
        textColor = 'green';
      } else if (percentDiffMa5Ma13 <= 1) {
        textColor = 'red';
      }

      row.querySelector('.ma5').innerHTML = `<a href="https://marketchameleon.com/Overview/${ticker}" target="_blank" style="color:${textColor};">${priceData.ma5?.toFixed(2)}</a>`;
      row.querySelector('.ma13').innerHTML = `<a href="https://www.tipranks.com/stocks/${ticker}/forecast" target="_blank" style="color:inherit;">${priceData.ma13?.toFixed(2)}</a>`;
      row.querySelector('.ma200').innerHTML = `<a href="https://www.barchart.com/stocks/quotes/${ticker}/overview" target="_blank" style="color:inherit;${priceData.price < priceData.ma200 ? 'color:red;' : 'color:green'}">${priceData.ma200 !== null ? priceData.ma200?.toFixed(2) : '-'}</a>`;

      row.querySelector('.rsi').textContent = priceData.rsi.toFixed(2);
      // Add highlights
      if (postErMove1d < 0 && priceData.ma5 >= priceData.ma13)
        row.classList.add('highlight-orange'); //BU = true;
      if (postErMove1d > 0 && priceData.ma5 <= priceData.ma13)
        row.classList.add('highlight-green'); //TD = true;
      if (postErMove1d < 0 && priceData.ma5 <= priceData.ma13)
        row.classList.add('highlight-red'); //BD = true;
      if (postErMove1d > 0 && priceData.ma5 >= priceData.ma13)
        row.classList.add('highlight-blue'); //TU = true;
    }

    // Utility to check if today is a new business day compared to cached date
    function isNewBusinessDay(lastDateStr) {
      if (!lastDateStr) return true;
      const lastDate = new Date(lastDateStr);
      const now = new Date();

      // Check if today is weekend
      if (now.getDay() === 0 || now.getDay() === 6) return false;

      // Check if last fetch was on a different business day
      let prevBusinessDay = new Date(now);
      if (now.getDay() === 1) { // Monday
        prevBusinessDay.setDate(now.getDate() - 3);
      } else if (now.getDay() > 1) {
        prevBusinessDay.setDate(now.getDate() - 1);
      }

      // If last fetch was not today, it's a new business day
      return (
        lastDate.getFullYear() !== now.getFullYear() ||
        lastDate.getMonth() !== now.getMonth() ||
        lastDate.getDate() !== now.getDate()
      );
    }

    // Utility to check if over an hour has passed since last fetch
    function isOverAnHour(lastDateStr) {
      if (!lastDateStr) return true;
      const lastDate = new Date(lastDateStr);
      const now = new Date();
      return (now - lastDate) > 60 * 60 * 1000;
    }

    // Cache helpers
    function getCache(key) {
      try {
        return JSON.parse(localStorage.getItem(key));
      } catch {
        return null;
      }
    }
    function setCache(key, value) {
      localStorage.setItem(key, JSON.stringify(value));
    }

    // Wrap fetchEarnings with caching
    async function fetchEarningsCached(ticker) {
      const spinner = document.getElementById('loadingSpinner');
      const cacheKey = `Straddle_er_${ticker}`;
      const cached = getCache(cacheKey);

      if (cached && cached.data && cached.fetchedAt &&
        !isNewBusinessDay(cached.fetchedAt) &&
        !isOverAnHour(cached.fetchedAt)) {
        return cached.data;
      }

      spinner.style.display = 'block';
      try {
        const data = await fetchEarnings(ticker);
        if (data) {
          setCache(cacheKey, { data, fetchedAt: new Date().toISOString() });
        }
        return data;
      } finally {
        spinner.style.display = 'none';
        const spinnerDone = document.getElementById('doneSpinner');
        spinner.style.display = 'block';
      }
    }

    async function getPricesCached(ticker) {
      const spinner = document.getElementById('loadingSpinner');
      const cacheKey = `Straddle_$_${ticker}`;
      const cached = getCache(cacheKey);

      if (cached && cached.data && cached.data.price && cached.fetchedAt &&
        !isNewBusinessDay(cached.fetchedAt) &&
        !isOverAnHour(cached.fetchedAt)) {
        return cached.data;
      }

      spinner.style.display = 'block';
      try {
        const data = await getPrices(ticker);
        if (data && data.price) {
          setCache(cacheKey, { data, fetchedAt: new Date().toISOString() });
        }
        return data;
      } finally {
        spinner.style.display = 'none';
      }
    }

    // Update renderTable to use cached fetchers in parallel with concurrency control
    async function renderTable() {
      const spinner = document.getElementById('loadingSpinner');
      spinner.style.display = 'block'; // Show spinner

      const tableBody = document.querySelector('#earningsTable tbody');
      tableBody.innerHTML = '';

      // Concurrency limit for network requests
      const CONCURRENCY_LIMIT = 20;
      let index = 0;

      // Helper to render a row immediately from cached data
      function renderRowFromCache(ticker, data) {
        if (!data || !data.expected_move_perc || data.expected_move_perc == null) return;

        var calcPostErMove1d = Math.abs(data.post_earnings_move_1d);
        var straddleCalulated = data.straddle && data.straddle != "N/A" ? toDecimal(parseFloat(data.straddle) + parseFloat(data.straddle) * 0.15) : '0';
        var expMoveCalulated = toDecimal(parseFloat(data.expected_move_perc) + calcPostErMove1d * 0.15);
        if (!data || !straddleCalulated)
          return;
        var p = data.avgHistoricMove && straddleCalulated > 0 ? (data.avgHistoricMove - straddleCalulated).toFixed(2) : -99;
        const row = `<tr id="row-${ticker}">
                    <td>${ticker}</td>
                    <td class="rsi">0</td>
                    <td>${data.er_date}</td>
                    <td>${data.report_date}</td>
                    <td style="${data.avgHistoricMove >= straddleCalulated ? 'color:green;' : 'color:red'}">${straddleCalulated}</td>
                    <td>${data.avgHistoricMove?.toFixed(2)}</td>
                    <td>${expMoveCalulated}</td>
                    <td>${data.post_earnings_move_1d}</td>
                    <td class="priceChange"><a href="https://robinhood.com/stocks/${ticker}" target="_blank" style="color:inherit;">${data.priceChange}</a></td>
                    <td class="price"><a href="https://finviz.com/quote.ashx?t=${ticker}" target="_blank" style="color:inherit;}">${data.price}</a></td>
                    <td class="ma5">-</td>
                    <td class="ma13">-</td>
                    <td class="ma200">-</td>
                    <td>${p}</td>
                  </tr>`;
        tableBody.innerHTML += row;

        // Try to get price data from cache and update cells immediately if available
        const priceCache = getCache(`Straddle_$_${ticker}`);
        if (
          priceCache &&
          priceCache.data &&
          priceCache.price &&
          priceCache.fetchedAt &&
          !isNewBusinessDay(priceCache.fetchedAt) &&
          !isOverAnHour(priceCache.fetchedAt)
        ) {
          updatePriceCells(ticker, priceCache.data, data.post_earnings_move_1d);
        } else {
          // Otherwise, fetch price data in background
          getPricesCached(ticker)
            .then(priceData => updatePriceCells(ticker, priceData, data.post_earnings_move_1d))
            .catch(err => console.error(`Price error for ${ticker}:`, err));
        }
      }

      // Helper to process a batch of tickers (fetching only those not cached/expired)
      async function processBatch(batch) {
        // For each ticker, check if earnings cache is valid
        const uncachedTickers = [];
        const cachedData = [];

        for (const ticker of batch) {
          const cacheKey = `Straddle_er_${ticker}`;
          const cached = getCache(cacheKey);
          if (
            cached &&
            cached.data &&
            cached.fetchedAt &&
            !isNewBusinessDay(cached.fetchedAt) &&
            !isOverAnHour(cached.fetchedAt)
          ) {
            cachedData.push({ ticker, data: cached.data });
          } else {
            uncachedTickers.push(ticker);
          }
        }

        // Render cached rows immediately
        for (const { ticker, data } of cachedData) {
          renderRowFromCache(ticker, data);
        }

        // Fetch uncached earnings in parallel (with concurrency limit)
        for (let i = 0; i < uncachedTickers.length; i += CONCURRENCY_LIMIT) {
          const subBatch = uncachedTickers.slice(i, i + CONCURRENCY_LIMIT);
          const earningsResults = await Promise.all(
            subBatch.map(ticker => fetchEarningsCached(ticker).catch(() => null))
          );

          for (let j = 0; j < subBatch.length; j++) {
            const ticker = subBatch[j];
            const data = earningsResults[j];
            renderRowFromCache(ticker, data);
          }
        }
      }

      // Process all tickers in batches
      try {
        while (index < tickers.length) {
          const batch = tickers.slice(index, index + CONCURRENCY_LIMIT);
          await processBatch(batch);
          index += CONCURRENCY_LIMIT;
          await new Promise(res => setTimeout(res, 200));
        }

        // Automatically sort by report date (column index 5)
        sortTable(2);
      } finally {
        spinner.style.display = 'none'; // Hide spinner when done or on error
      }
    }

    function sortTable(columnIndex, descending = false) {
      const table = document.getElementById("earningsTable");
      const tbody = table.tBodies[0];
      const rows = Array.from(tbody.rows);
      const isNumeric = columnIndex !== 0 && columnIndex !== 2 && columnIndex !== 3;

      const sortedRows = rows.sort((a, b) => {
        const valA = a.cells[columnIndex].textContent.replace('%', '');
        const valB = b.cells[columnIndex].textContent.replace('%', '');

        if (isNumeric) {
          return parseFloat(valA) - parseFloat(valB);
        } else {
          return valA.localeCompare(valB);
        }
      });

      if (descending || tbody.getAttribute('data-sorted') === `${columnIndex}-asc`) {
        sortedRows.reverse();
        tbody.setAttribute('data-sorted', `${columnIndex}-desc`);
      } else {
        tbody.setAttribute('data-sorted', `${columnIndex}-asc`);
      }

      tbody.innerHTML = '';
      sortedRows.forEach(row => tbody.appendChild(row));
    }

    renderTable();

  </script>
</body>

</html>
